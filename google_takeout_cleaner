#!/bin/bash

# A script to clean up Google Takeout files by correcting file extensions based on
# MIME type and ensuring metadata JSON files are named correctly.

# --- Configuration ---
# Set to "true" to run in dry-run mode (print commands without executing them)
DRY_RUN=false
# Set to true by default. Can be disabled with --no-mimetype-check flag.
MIMETYPE_CHECK_ENABLED=true

# Define the log file
LOG_FILE="google_takeout_cleaner_error.log"

# Redirect stderr to the log file
exec 2>>"$LOG_FILE"

# --- Script Boilerplate ---
# Exit immediately if a command exits with a non-zero status.
set -e

# --- Helper Functions ---
function log() {
    echo "[INFO] $1"
}

function warn() {
    echo "[WARN] $1" >&2
}

function error() {
    echo "[ERROR] $1" >&2
    exit 1
}

function show_usage() {
    echo "Usage: $0 [OPTIONS] <target_directory>"
    echo ""
    echo "A script to clean up Google Takeout files by correcting file extensions and metadata."
    echo ""
    echo "Options:"
    echo "  --no-mimetype-check    Disables the check for file extensions based on MIME type (Phase 2)."
    echo "  --dry-run              Print commands without executing them."
    echo "  -h, --help             Show this help message."
}

function execute_mv() {
    local source="$1"
    local destination="$2"

    if [ "$source" == "$destination" ]; then
        return
    fi

    if [ "$DRY_RUN" = true ]; then
        echo "  [DRY RUN] mv \"$source\" \"$destination\""
    else
        mkdir -p "$(dirname "$destination")"
        mv -v "$source" "$destination"
    fi
}

# --- Argument and Dependency Checks ---
TARGET_DIR=""
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --no-mimetype-check)
            MIMETYPE_CHECK_ENABLED=false
            shift # past argument
            ;;
        --dry-run)
            DRY_RUN=true
            shift # past argument
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            # Assume it's the target directory
            if [ -n "$TARGET_DIR" ]; then
                error "Too many arguments. Only one target directory is allowed. Use --help for more info."
            fi
            TARGET_DIR="$1"
            shift # past argument
            ;;
    esac
done

if [ -z "$TARGET_DIR" ]; then
    error "Target directory not specified. Use --help for usage information."
fi

if [ ! -d "$TARGET_DIR" ]; then
    error "Directory '$TARGET_DIR' not found."
fi

if ! command -v exiftool &> /dev/null; then
    error "exiftool could not be found. Please install it first."
fi

if [ "$DRY_RUN" = true ]; then
    log "--- SCRIPT IS RUNNING IN DRY-RUN MODE ---"
    log "--- No files will actually be renamed. ---"
fi

if [ "$MIMETYPE_CHECK_ENABLED" = false ]; then
    log "--- MIME TYPE CHECK (PHASE 2) IS DISABLED ---"
fi


# ==============================================================================
# PHASE 1: PRE-CLEANUP JSON FILES
# Fix common JSON naming issues first to simplify the main logic.
# ==============================================================================

log "--- Phase 1: Cleaning up JSON filenames ---"

# 1a: Rename `supplemental-meta.json` to `supplemental-metadata.json`
log "Step 1a: Searching for 'supplemental-meta.json' files to rename..."
find "$TARGET_DIR" -type f -name '*supplemental-meta.json' -print0 | while IFS= read -r -d $'\0' meta_file; do
    new_meta_file="${meta_file/supplemental-meta.json/supplemental-metadata.json}"
    log "Renaming abbreviated metadata file:"
    execute_mv "$meta_file" "$new_meta_file"
done

# 1b: Fix JSONs with misplaced parenthesis, e.g., `2014-02-03.jpg.supplemental-metadata(34).json`
log "Step 1b: Searching for JSON files with misplaced parenthesis..."
find "$TARGET_DIR" -type f -name '*).json' -print0 | while IFS= read -r -d $'\0' old_path; do
    old_name=$(basename "$old_path")
    old_dir=$(dirname "$old_path")

    # This pattern is now simple: just find a counter in parenthesis at the end.
    if [[ "$old_name" =~ \(([0-9]+)\)\.json$ ]]; then
        counter="${BASH_REMATCH[1]}"
        # Strip the counter and .json suffix to get the base with the metadata string
        # e.g., "img_0002.jpg.supplemental-metadata(123).json" -> "img_0002.jpg.supplemental-metadata"
        base_with_meta="${old_name%($counter).json}"

        full_original_filename=""
        # Now, check for and strip the known metadata strings from the end
        if [[ "$base_with_meta" == *.supplemental-metadata ]]; then
            full_original_filename="${base_with_meta%.supplemental-metadata}"
        elif [[ "$base_with_meta" == *.supplemental-metadat ]]; then
            full_original_filename="${base_with_meta%.supplemental-metadat}"
        elif [[ "$base_with_meta" == *.supplemental-meta ]]; then
            full_original_filename="${base_with_meta%.supplemental-meta}"
        else
            # This doesn't match a pattern we know how to fix, so skip it.
            continue
        fi

        # If we successfully isolated the original filename (e.g., "img_0002.jpg")
        if [ -n "$full_original_filename" ]; then
            # Now, parse the full_original_filename to separate base and extension
            base_name="${full_original_filename%.*}"
            extension="${full_original_filename##*.}"

            # Construct the correct name: {base_name}({counter}).{extension}.supplemental-metadata.json
            # Note the hardcoded, correct "supplemental-metadata.json" at the end.
            new_name="${base_name}(${counter}).${extension}.supplemental-metadata.json"
            new_path="${old_dir}/${new_name}"

            log "Fixing misplaced parenthesis in JSON filename:"
            execute_mv "$old_path" "$new_path"
        fi
    fi
done


# ==============================================================================
# PHASE 2: CORRECT MEDIA FILE EXTENSIONS BASED ON MIME TYPE
# This phase focuses solely on renaming the primary media files if needed.
# ==============================================================================

if [ "$MIMETYPE_CHECK_ENABLED" = true ]; then
    log "--- Phase 2: Correcting media file extensions (MIME type check enabled) ---"
    find "$TARGET_DIR" -type f -not -iname '*.json' -print0 | while IFS= read -r -d $'\0' media_path; do
        
        dir=$(dirname "$media_path")
        filename=$(basename "$media_path")
        log "Processing extension: $media_path"

        # Skip files with .jpg or .jpeg extensions (case-insensitive) for speed.
        # We assume these are correct and don't need exiftool's MIME type check here.
        # Their metadata files will be handled in Phase 3.
        current_ext_lower=$(echo "${filename##*.}" | tr '[:upper:]' '[:lower:]')
        if [[ "$current_ext_lower" == "jpg" || "$current_ext_lower" == "jpeg" ]]; then
            log "  - Skipping MIME type check for file with extension '$current_ext_lower': $media_path"
            continue # Skip to the next media file in this phase
        fi

        base_name="${filename%.*}"

        # Get the actual MIME type from exiftool
        mime_type=$(exiftool -s3 -MIMEType "$media_path")
        new_ext=""

        case "$mime_type" in
            "image/png")
                if [[ "$current_ext_lower" != "png" ]]; then new_ext="png"; fi
                ;;
            "image/gif")
                if [[ "$current_ext_lower" != "gif" ]]; then new_ext="gif"; fi
                ;;
            "image/heic")
                if [[ "$current_ext_lower" != "heic" ]]; then new_ext="heic"; fi
                ;;
            "video/mp4")
                if [[ "$current_ext_lower" != "mp4" ]]; then new_ext="mp4"; fi
                ;;
            "video/quicktime")
                if [[ "$current_ext_lower" != "mov" ]]; then new_ext="mov"; fi
                ;;
            "image/jpeg")
                if [[ "$current_ext_lower" != "jpg" && "$current_ext_lower" != "jpeg" ]]; then new_ext="jpg"; fi
                ;;
            *)
                warn "  - Unknown or unhandled MIME type '$mime_type' for '$media_path'. Skipping extension correction."
                ;;
        esac

        # If an extension change is needed, rename the file
        if [ -n "$new_ext" ]; then
            new_media_path="${dir}/${base_name}.${new_ext}"
            if [ -e "$new_media_path" ]; then
                warn "  - SKIPPING rename of '$filename' to '${base_name}.${new_ext}' because destination already exists."
            else
                log "  - Correcting extension from '$current_ext_lower' to '$new_ext' based on MIME type '$mime_type'."
                execute_mv "$media_path" "$new_media_path"
            fi
        fi
    done
else
    log "--- Phase 2: SKIPPED (MIME type check was disabled by user) ---"
fi


      
# ==============================================================================
# PHASE 3: SYNC METADATA FILENAMES TO MATCH MEDIA FILES
# This phase ensures that the JSON metadata file is named perfectly to its
# corresponding media file, including handling the "0" vs "08" discrepancy.
# ==============================================================================

log "--- Phase 3: Syncing metadata filenames ---"
find "$TARGET_DIR" -type f -not -iname '*.json' -print0 | while IFS= read -r -d $'\0' media_path; do
    
    dir=$(dirname "$media_path")
    filename=$(basename "$media_path")
    log "Processing metadata for: $media_path"

    expected_meta_path="${media_path}.supplemental-metadata.json"

    if [ -f "$expected_meta_path" ]; then
        log "  - Metadata file is already correctly named for '$filename'."
        continue
    fi

    base_name_no_ext="${filename%.*}"

    mapfile -t candidate_files < <(find "$dir" -maxdepth 1 -type f -iname "${base_name_no_ext}.*.supplemental-metadata.json")
    if [ "${#candidate_files[@]}" -eq 1 ]; then
        found_meta_path="${candidate_files[0]}"
        if [ "$found_meta_path" != "$expected_meta_path" ]; then
            log "  - Found mismatched metadata file, syncing name for '$filename':"
            execute_mv "$found_meta_path" "$expected_meta_path"
        fi
    elif [ "${#candidate_files[@]}" -gt 1 ]; then
        warn "  - Found multiple possible metadata files for '$filename'. Please resolve manually."
        for candidate in "${candidate_files[@]}"; do
            warn "    - Candidate: $candidate"
        done
    else
        potential_meta_file="${base_name_no_ext:0:-1}.json"
        if [ -f "$dir/$potential_meta_file" ]; then
            log "  - Found metadata file matching old Google Takeout pattern. Renaming for '$filename':"
            execute_mv "$dir/$potential_meta_file" "$expected_meta_path"
        else
            # Check for various supplemental metadata abbreviations
            potential_meta_file_meta="${media_path}.supplemental-meta.json"
            potential_meta_file_metadat="${media_path}.supplemental-metadat.json"
            potential_meta_file_supplem="${media_path}.supplem.json" ### NEW ###

            if [ -f "$potential_meta_file_meta" ]; then
                log "  - Found 'supplemental-meta.json' file. Renaming for '$filename':"
                execute_mv "$potential_meta_file_meta" "$expected_meta_path"
            elif [ -f "$potential_meta_file_metadat" ]; then
                log "  - Found 'supplemental-metadat.json' file. Renaming for '$filename':"
                execute_mv "$potential_meta_file_metadat" "$expected_meta_path"
            elif [ -f "$potential_meta_file_supplem" ]; then ### NEW ###
                log "  - Found 'supplem.json' file. Renaming for '$filename':" ### NEW ###
                execute_mv "$potential_meta_file_supplem" "$expected_meta_path" ### NEW ###
            else
                log "  - No supplemental metadata file found for '$filename'."
            fi
        fi
    fi

done

    

      
# ==============================================================================
# PHASE 4: WRITE METADATA FROM JSON TO MEDIA FILES
# This is a destructive operation (-overwrite_original).
# ==============================================================================
log "--- Phase 4: Writing metadata from JSON files into media files ---"

if [ "$DRY_RUN" = true ]; then
    log "DRY RUN enabled. The following exiftool command will NOT be executed:"
    echo "
    exiftool -r -d %s -tagsfromfile \"%d/%F.supplemental-metadata.json\" \\
        -exclude \"*edited*\" \\
        \"-GPSAltitude<GeoDataAltitude\" \\
        \"-GPSLatitude<GeoDataLatitude\" \"-GPSLatitudeRef<GeoDataLatitude\" \\
        \"-GPSLongitude<GeoDataLongitude\" \"-GPSLongitudeRef<GeoDataLongitude\" \\
        \"-Keywords<Tags\" \"-Subject<Tags\" \\
        \"-Caption-Abstract<Description\" \"-ImageDescription<Description\" \\
        \"-DateTimeOriginal<PhotoTakenTimeTimestamp\" \\
        -ext jpg -ext jpeg -ext png -ext heic -ext gif -ext tif -ext tiff \\
        -ext mp4 -ext mov -ext avi -ext 3gp \\
        -overwrite_original -progress --ext json \"$TARGET_DIR\"
    "
else
    log "Executing exiftool to write metadata. This may take a while..."
    log "IMPORTANT: This will overwrite original files. Make sure you have a backup."
    
    exiftool -r -d %s -tagsfromfile "%d/%F.supplemental-metadata.json" \
        -exclude "*edited*" \
        "-GPSAltitude<GeoDataAltitude" \
        "-GPSLatitude<GeoDataLatitude" "-GPSLatitudeRef<GeoDataLatitude" \
        "-GPSLongitude<GeoDataLongitude" "-GPSLongitudeRef<GeoDataLongitude" \
        "-Keywords<Tags" "-Subject<Tags" \
        "-Caption-Abstract<Description" "-ImageDescription<Description" \
        "-DateTimeOriginal<PhotoTakenTimeTimestamp" \
        -ext jpg -ext jpeg -ext png -ext heic -ext gif -ext tif -ext tiff \
        -ext mp4 -ext mov -ext avi -ext 3gp \
        -overwrite_original -progress --ext json "$TARGET_DIR"
fi

log "--- Cleanup Complete ---"

    